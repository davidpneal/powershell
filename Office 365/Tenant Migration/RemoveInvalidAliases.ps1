#12/27/2018	
#This script will remove email aliases from mailboxes 

#The invalid domain list is generated by comparing the accepted domain list in the new Office 365 tenant against the
#accepted domains in the on premises environment.  In this use case, Get-AcceptedDomain was used to compare these values
#and the domains to be removed were saved in a csv, however any csv with a column named domainname should work.
$invdom = import-csv "D:\Project\NonAcceptedDomains.csv"


#Get all mailboxes in the forest
$allmb = get-mailbox -IgnoreDefaultScope -ResultSize unlimited


#To remove addresses just a subset of users, can do something like this to get their mailboxes (the CSV needs an emailaddress column)
$pilot = import-csv "D:\Project\pilotusers.csv"
$pilotmb = foreach($person in $pilot) {$allmb | ?{$_.primarysmtpaddress -like $person.emailaddress}}


#Remove invalid email aliases
foreach($domain in $invdom.domainname){
	foreach($mb in $allmb) {
		$mb.EmailAddresses | ?{$_.AddressString -like "*@$domain"} | %{
		Set-Mailbox -ignoredefaultscope $mb -EmailAddresses @{remove=$_}
		Write-output "$($mb.DistinguishedName);$_" | out-file "D:\project\removedaddresses.csv" -Append
		} 
	}
}



#Remove invalid email aliases from distribution groups
$allmb = Get-DistributionGroup -IgnoreDefaultScope -ResultSize unlimited


foreach($domain in $invdom.domainname){
	foreach($mb in $allgroups) {
		$mb.EmailAddresses | ?{$_ -like "*@$domain"} | %{
		Set-DistributionGroup -ignoredefaultscope $mb.DistinguishedName -EmailAddresses @{remove=$_}
		Write-output "$($mb.DistinguishedName);$_" | out-file "D:\project\removedgroupaddresses.csv" -Append
		} 
	}
}