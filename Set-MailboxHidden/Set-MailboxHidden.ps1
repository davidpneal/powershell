#1/26/2018

function Set-MailboxHidden {

	[CmdletBinding(SupportsShouldProcess,
				   ConfirmImpact='Low')]

   Param(
		[Parameter(ValueFromPipeline = $True, 
				   Mandatory = $True, 
				   Position = 0)]
		[string[]]$identity,
		
		[string]$pssession,
		
		[switch]$unhide
	)


	BEGIN {
		Write-Verbose "[BEGIN ] Starting: $($MyInvocation.Mycommand)"
		$SessionResult = $null

		#If a PSSession was passed, the necessary mailbox function needs to be loaded
		If ($PSBoundParameters.ContainsKey('pssession')) {
			try {
				#Since a PSSession was explicitly passed, use -allowclobber in case the Set-RemoteMailbox command already exists
				$SessionResult = Import-PSSession -Session $session -CommandName "Set-RemoteMailbox" -AllowClobber 
					#NOTE: need to determine how to pull the value for the key (for $session above)
					
			} catch {
				#Go ahead and catch here even though the next check will stop execution if Set-RemoteMailbox doesn’t exist
				#This will give a better error message other than "command doesn’t exist"
			}

			
		#Make sure the necessary commands are loaded
		try {
			get-command "Set-RemoteMailbox" -erroraction stop
		} catch {
			throw "need OnPrem EMS cmd" #Maybe keep the original error message?
			break #Make sure break skips the PROCESS block
		}
			
			
		#The default action of the tool is to hide the mailbox ($true), if $unhide is set, then need to flip the setting to $false
		If ($PSBoundParameters.ContainsKey('unhide')) {
			$ShouldHide = $false
		} else {
			$ShouldHide = $true
		}
		
	} #BEGIN
	
	
    PROCESS {
		if ($PSCmdlet.ShouldProcess($identity)) { 
			try {
				Set-RemoteMailbox -identity $identity -HiddenFromAddressListsEnabled $ShouldHide
			} catch {
				write-error "Failed to set the user mailbox hidden attribute"
				#TEST THIS - might just pass the error generated by Set-RemoteMailbox instead
			}
		}
		
	} #PROCESS
	
	
	END {
		If($SessionResult -ne $null) {
			#Unload the temp module
			Remove-Module $SessionResult
		}
		
		Write-Verbose "[END ] Ending: $($MyInvocation.Mycommand)"
		
	} #END
}
