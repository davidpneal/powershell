#4/25/2018

function Set-MailboxHidden {

	[CmdletBinding(SupportsShouldProcess,
				   ConfirmImpact='Low')]

    Param(
		[Parameter(ValueFromPipeline = $True, 
				   Mandatory = $True, 
				   Position = 0)]
		[string[]]$identity,
		
		#could probably also change this to type System.Management.Automation.Runspaces.PSSession
		[object]$session,
		
		[switch]$unhide
	)

	
	BEGIN {
		write-verbose "[BEGIN ] Starting: $($MyInvocation.Mycommand)"
		$SessionResult = $null

		#If a PSSession was passed, the necessary mailbox function needs to be loaded
		if ($PSBoundParameters.ContainsKey('session')) {
			try {
				#Since a PSSession was explicitly passed, use -allowclobber in case the Set-RemoteMailbox command already exists
				$SessionResult = Import-PSSession -Session $session -CommandName "Set-RemoteMailbox" -AllowClobber 	
			} catch {
				write-verbose $_
				throw "Unable to import the Set-RemoteMailbox EMS command using the provided PSSession"
			}
		}

		
		#Make sure the Set-RemoteMailbox command is loaded
		try {
			get-command "Set-RemoteMailbox" -erroraction stop
		} catch {
			write-verbose $_
			throw "The Set-RemoteMailbox command is not currently available. Please connect to the OnPrem EMS and try again."
		}
			
			
		#The default action of the tool is to hide the mailbox ($true), if $unhide is set, then need to flip the setting to $false
		if ($PSBoundParameters.ContainsKey('unhide')) {
			$ShouldHide = $false
		} else {
			$ShouldHide = $true
		}
		
	} #BEGIN
	
	
    PROCESS {
		if ($PSCmdlet.ShouldProcess($identity)) { 
			try {
				Set-RemoteMailbox -identity $identity -HiddenFromAddressListsEnabled $ShouldHide
			} catch {
				write-error "Failed to set the user mailbox hidden attribute"
				#TEST THIS - might just pass the error generated by Set-RemoteMailbox instead
			}
		}
		
	} #PROCESS
	
	
	END {
		If($SessionResult -ne $null) {
			#Unload the temp module
			Remove-Module $SessionResult
		}
		
		write-verbose "[END ] Ending: $($MyInvocation.Mycommand)"
		
	} #END
}
